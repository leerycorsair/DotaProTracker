// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "local/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompanyTeamRepository is a mock of CompanyTeamRepository interface.
type MockCompanyTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyTeamRepositoryMockRecorder
}

// MockCompanyTeamRepositoryMockRecorder is the mock recorder for MockCompanyTeamRepository.
type MockCompanyTeamRepositoryMockRecorder struct {
	mock *MockCompanyTeamRepository
}

// NewMockCompanyTeamRepository creates a new mock instance.
func NewMockCompanyTeamRepository(ctrl *gomock.Controller) *MockCompanyTeamRepository {
	mock := &MockCompanyTeamRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyTeamRepository) EXPECT() *MockCompanyTeamRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCompanyTeamRepository) Add(arg0 models.CompanyTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCompanyTeamRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCompanyTeamRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockCompanyTeamRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyTeamRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyTeamRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockCompanyTeamRepository) Edit(arg0 models.CompanyTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockCompanyTeamRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockCompanyTeamRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockCompanyTeamRepository) FindById(arg0 int) ([]*models.CompanyTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.CompanyTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCompanyTeamRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCompanyTeamRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockCompanyTeamRepository) GetAll() ([]*models.CompanyTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.CompanyTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCompanyTeamRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCompanyTeamRepository)(nil).GetAll))
}

// MockCompanyTournamentRepository is a mock of CompanyTournamentRepository interface.
type MockCompanyTournamentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyTournamentRepositoryMockRecorder
}

// MockCompanyTournamentRepositoryMockRecorder is the mock recorder for MockCompanyTournamentRepository.
type MockCompanyTournamentRepositoryMockRecorder struct {
	mock *MockCompanyTournamentRepository
}

// NewMockCompanyTournamentRepository creates a new mock instance.
func NewMockCompanyTournamentRepository(ctrl *gomock.Controller) *MockCompanyTournamentRepository {
	mock := &MockCompanyTournamentRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyTournamentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyTournamentRepository) EXPECT() *MockCompanyTournamentRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCompanyTournamentRepository) Add(arg0 models.CompanyTournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCompanyTournamentRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCompanyTournamentRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockCompanyTournamentRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyTournamentRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyTournamentRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockCompanyTournamentRepository) Edit(arg0 models.CompanyTournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockCompanyTournamentRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockCompanyTournamentRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockCompanyTournamentRepository) FindById(arg0 int) ([]*models.CompanyTournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.CompanyTournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCompanyTournamentRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCompanyTournamentRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockCompanyTournamentRepository) GetAll() ([]*models.CompanyTournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.CompanyTournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCompanyTournamentRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCompanyTournamentRepository)(nil).GetAll))
}

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCompanyRepository) Add(arg0 models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCompanyRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCompanyRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockCompanyRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockCompanyRepository) Edit(arg0 models.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockCompanyRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockCompanyRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockCompanyRepository) FindById(arg0 int) ([]*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCompanyRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCompanyRepository)(nil).FindById), arg0)
}

// FindByName mocks base method.
func (m *MockCompanyRepository) FindByName(arg0 string) ([]*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockCompanyRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockCompanyRepository)(nil).FindByName), arg0)
}

// GetAll mocks base method.
func (m *MockCompanyRepository) GetAll() ([]*models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCompanyRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCompanyRepository)(nil).GetAll))
}

// MockMatchPerfomanceRepository is a mock of MatchPerfomanceRepository interface.
type MockMatchPerfomanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMatchPerfomanceRepositoryMockRecorder
}

// MockMatchPerfomanceRepositoryMockRecorder is the mock recorder for MockMatchPerfomanceRepository.
type MockMatchPerfomanceRepositoryMockRecorder struct {
	mock *MockMatchPerfomanceRepository
}

// NewMockMatchPerfomanceRepository creates a new mock instance.
func NewMockMatchPerfomanceRepository(ctrl *gomock.Controller) *MockMatchPerfomanceRepository {
	mock := &MockMatchPerfomanceRepository{ctrl: ctrl}
	mock.recorder = &MockMatchPerfomanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchPerfomanceRepository) EXPECT() *MockMatchPerfomanceRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMatchPerfomanceRepository) Add(arg0 models.MatchPerfomance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockMatchPerfomanceRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockMatchPerfomanceRepository) Edit(arg0 models.MatchPerfomance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).Edit), arg0)
}

// FindByHero mocks base method.
func (m *MockMatchPerfomanceRepository) FindByHero(arg0 string) ([]*models.MatchPerfomance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHero", arg0)
	ret0, _ := ret[0].([]*models.MatchPerfomance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHero indicates an expected call of FindByHero.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) FindByHero(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHero", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).FindByHero), arg0)
}

// FindById mocks base method.
func (m *MockMatchPerfomanceRepository) FindById(arg0 int) ([]*models.MatchPerfomance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.MatchPerfomance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockMatchPerfomanceRepository) GetAll() ([]*models.MatchPerfomance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.MatchPerfomance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMatchPerfomanceRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMatchPerfomanceRepository)(nil).GetAll))
}

// MockMatchRepository is a mock of MatchRepository interface.
type MockMatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepositoryMockRecorder
}

// MockMatchRepositoryMockRecorder is the mock recorder for MockMatchRepository.
type MockMatchRepositoryMockRecorder struct {
	mock *MockMatchRepository
}

// NewMockMatchRepository creates a new mock instance.
func NewMockMatchRepository(ctrl *gomock.Controller) *MockMatchRepository {
	mock := &MockMatchRepository{ctrl: ctrl}
	mock.recorder = &MockMatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepository) EXPECT() *MockMatchRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockMatchRepository) Add(arg0 models.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockMatchRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatchRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockMatchRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMatchRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMatchRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockMatchRepository) Edit(arg0 models.Match) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockMatchRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockMatchRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockMatchRepository) FindById(arg0 int) ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMatchRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMatchRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockMatchRepository) GetAll() ([]*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMatchRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMatchRepository)(nil).GetAll))
}

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPlayerRepository) Add(arg0 models.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPlayerRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPlayerRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockPlayerRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlayerRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlayerRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockPlayerRepository) Edit(arg0 models.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockPlayerRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPlayerRepository)(nil).Edit), arg0)
}

// FindByBirthdate mocks base method.
func (m *MockPlayerRepository) FindByBirthdate(arg0 int) ([]*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBirthdate", arg0)
	ret0, _ := ret[0].([]*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBirthdate indicates an expected call of FindByBirthdate.
func (mr *MockPlayerRepositoryMockRecorder) FindByBirthdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBirthdate", reflect.TypeOf((*MockPlayerRepository)(nil).FindByBirthdate), arg0)
}

// FindById mocks base method.
func (m *MockPlayerRepository) FindById(arg0 int) ([]*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockPlayerRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockPlayerRepository)(nil).FindById), arg0)
}

// FindByName mocks base method.
func (m *MockPlayerRepository) FindByName(arg0 string) ([]*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].([]*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockPlayerRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockPlayerRepository)(nil).FindByName), arg0)
}

// GetAll mocks base method.
func (m *MockPlayerRepository) GetAll() ([]*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPlayerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPlayerRepository)(nil).GetAll))
}

// MockTeamPlayerRepository is a mock of TeamPlayerRepository interface.
type MockTeamPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamPlayerRepositoryMockRecorder
}

// MockTeamPlayerRepositoryMockRecorder is the mock recorder for MockTeamPlayerRepository.
type MockTeamPlayerRepositoryMockRecorder struct {
	mock *MockTeamPlayerRepository
}

// NewMockTeamPlayerRepository creates a new mock instance.
func NewMockTeamPlayerRepository(ctrl *gomock.Controller) *MockTeamPlayerRepository {
	mock := &MockTeamPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockTeamPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamPlayerRepository) EXPECT() *MockTeamPlayerRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTeamPlayerRepository) Add(arg0 models.TeamPlayer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTeamPlayerRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTeamPlayerRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockTeamPlayerRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamPlayerRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamPlayerRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockTeamPlayerRepository) Edit(arg0 models.TeamPlayer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTeamPlayerRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTeamPlayerRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockTeamPlayerRepository) FindById(arg0 int) ([]*models.TeamPlayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.TeamPlayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTeamPlayerRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTeamPlayerRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockTeamPlayerRepository) GetAll() ([]*models.TeamPlayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.TeamPlayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTeamPlayerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTeamPlayerRepository)(nil).GetAll))
}

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTeamRepository) Add(arg0 models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTeamRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTeamRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockTeamRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockTeamRepository) Edit(arg0 models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTeamRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTeamRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockTeamRepository) FindById(arg0 int) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTeamRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTeamRepository)(nil).FindById), arg0)
}

// FindByName mocks base method.
func (m *MockTeamRepository) FindByName(arg0 string) ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockTeamRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockTeamRepository)(nil).FindByName), arg0)
}

// GetAll mocks base method.
func (m *MockTeamRepository) GetAll() ([]*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTeamRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTeamRepository)(nil).GetAll))
}

// MockTournamentTeamRepository is a mock of TournamentTeamRepository interface.
type MockTournamentTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTournamentTeamRepositoryMockRecorder
}

// MockTournamentTeamRepositoryMockRecorder is the mock recorder for MockTournamentTeamRepository.
type MockTournamentTeamRepositoryMockRecorder struct {
	mock *MockTournamentTeamRepository
}

// NewMockTournamentTeamRepository creates a new mock instance.
func NewMockTournamentTeamRepository(ctrl *gomock.Controller) *MockTournamentTeamRepository {
	mock := &MockTournamentTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTournamentTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTournamentTeamRepository) EXPECT() *MockTournamentTeamRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTournamentTeamRepository) Add(arg0 models.TournamentTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTournamentTeamRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTournamentTeamRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockTournamentTeamRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTournamentTeamRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTournamentTeamRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockTournamentTeamRepository) Edit(arg0 models.TournamentTeam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTournamentTeamRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTournamentTeamRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockTournamentTeamRepository) FindById(arg0 int) ([]*models.TournamentTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.TournamentTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTournamentTeamRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTournamentTeamRepository)(nil).FindById), arg0)
}

// GetAll mocks base method.
func (m *MockTournamentTeamRepository) GetAll() ([]*models.TournamentTeam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.TournamentTeam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTournamentTeamRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTournamentTeamRepository)(nil).GetAll))
}

// MockTournamentRepository is a mock of TournamentRepository interface.
type MockTournamentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTournamentRepositoryMockRecorder
}

// MockTournamentRepositoryMockRecorder is the mock recorder for MockTournamentRepository.
type MockTournamentRepositoryMockRecorder struct {
	mock *MockTournamentRepository
}

// NewMockTournamentRepository creates a new mock instance.
func NewMockTournamentRepository(ctrl *gomock.Controller) *MockTournamentRepository {
	mock := &MockTournamentRepository{ctrl: ctrl}
	mock.recorder = &MockTournamentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTournamentRepository) EXPECT() *MockTournamentRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTournamentRepository) Add(arg0 models.Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTournamentRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTournamentRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockTournamentRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTournamentRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTournamentRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockTournamentRepository) Edit(arg0 models.Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTournamentRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTournamentRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockTournamentRepository) FindById(arg0 int) ([]*models.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockTournamentRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockTournamentRepository)(nil).FindById), arg0)
}

// FindByName mocks base method.
func (m *MockTournamentRepository) FindByName(arg0 string) ([]*models.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0)
	ret0, _ := ret[0].([]*models.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockTournamentRepositoryMockRecorder) FindByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockTournamentRepository)(nil).FindByName), arg0)
}

// FindByYear mocks base method.
func (m *MockTournamentRepository) FindByYear(arg0 int) ([]*models.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByYear", arg0)
	ret0, _ := ret[0].([]*models.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByYear indicates an expected call of FindByYear.
func (mr *MockTournamentRepositoryMockRecorder) FindByYear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByYear", reflect.TypeOf((*MockTournamentRepository)(nil).FindByYear), arg0)
}

// GetAll mocks base method.
func (m *MockTournamentRepository) GetAll() ([]*models.Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTournamentRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTournamentRepository)(nil).GetAll))
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserRepository) Add(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserRepository)(nil).Add), arg0)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), arg0)
}

// Edit mocks base method.
func (m *MockUserRepository) Edit(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserRepositoryMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserRepository)(nil).Edit), arg0)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(arg0 int) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), arg0)
}

// FindByLogin mocks base method.
func (m *MockUserRepository) FindByLogin(arg0 string) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", arg0)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin.
func (mr *MockUserRepositoryMockRecorder) FindByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindByLogin), arg0)
}

// GetAll mocks base method.
func (m *MockUserRepository) GetAll() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepository)(nil).GetAll))
}
